//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.14

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "auth_group")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
    pub category_id: i32,
    pub alliance_id: Option<i32>,
    pub corporation_id: Option<i32>,
    pub confidential: bool,
    pub group_type: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::auth_group_category::Entity",
        from = "Column::CategoryId",
        to = "super::auth_group_category::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    AuthGroupCategory,
    #[sea_orm(has_many = "super::auth_group_permission::Entity")]
    AuthGroupPermission,
    #[sea_orm(has_many = "super::auth_group_user::Entity")]
    AuthGroupUser,
    #[sea_orm(
        belongs_to = "super::eve_alliance::Entity",
        from = "Column::AllianceId",
        to = "super::eve_alliance::Column::AllianceId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    EveAlliance,
    #[sea_orm(
        belongs_to = "super::eve_corporation::Entity",
        from = "Column::CorporationId",
        to = "super::eve_corporation::Column::CorporationId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    EveCorporation,
}

impl Related<super::auth_group_category::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AuthGroupCategory.def()
    }
}

impl Related<super::auth_group_permission::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AuthGroupPermission.def()
    }
}

impl Related<super::auth_group_user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AuthGroupUser.def()
    }
}

impl Related<super::eve_alliance::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::EveAlliance.def()
    }
}

impl Related<super::eve_corporation::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::EveCorporation.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
