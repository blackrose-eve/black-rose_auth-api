//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.14

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "auth_user")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub admin: bool,
    pub created: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::auth_group_user::Entity")]
    AuthGroupUser,
    #[sea_orm(has_many = "super::auth_role_users::Entity")]
    AuthRoleUsers,
    #[sea_orm(has_many = "super::auth_user_character_ownership::Entity")]
    AuthUserCharacterOwnership,
}

impl Related<super::auth_group_user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AuthGroupUser.def()
    }
}

impl Related<super::auth_role_users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AuthRoleUsers.def()
    }
}

impl Related<super::auth_user_character_ownership::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AuthUserCharacterOwnership.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
